{\rtf1\ansi\ansicpg1252\cocoartf1265
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red170\green13\blue145;\red28\green0\blue207;
\red196\green26\blue22;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 // Harris Christiansen\cf0 \
\cf2 // Copyright Harris Christiansen 2013\cf0 \
\cf2 // FRC Team 3245 - Waterford School\cf0 \
\cf2 // 2013 Competition Bot - Utah+Las Vegas Regional\cf0 \
\cf2 // Written Feb 5, 2013\cf0 \
\cf2 // Updated 4-1-13\cf0 \
\
\cf2 // Package\cf0 \
\cf3 package\cf0  edu.first.team3245;\
\
\cf2 // Imports\cf0 \
\cf3 import\cf0  edu.wpi.first.wpilibj.*;\
\cf3 import\cf0  InsightLT.InsightLT;\
\cf3 import\cf0  InsightLT.StringData;\
\cf3 import\cf0  InsightLT.IntegerData;\
\cf3 import\cf0  InsightLT.DecimalData;\
\cf3 public\cf0  \cf3 class\cf0  UtCompBot \cf3 extends\cf0  IterativeRobot \{\
	\cf2 // Shooter Speed\cf0 \
	\cf3 double\cf0  shtSetSpeed=\cf4 0.75\cf0 ;\
	\cf2 // Pilot Controls\cf0 \
	\cf3 int\cf0  leftStick=\cf4 2\cf0 , rightStick=\cf4 4\cf0 , fastBtn=\cf4 8\cf0 , slowBtn=\cf4 7\cf0 , lowGearBtn=\cf4 5\cf0 , highGearBtn=\cf4 6\cf0 , revDrvBtn=\cf4 3\cf0 , shtBtn=\cf4 2\cf0 , shtPistonBtn=\cf4 4\cf0 ;\
	\cf3 int\cf0  coAutoShtBtn=\cf4 8\cf0 , coShtBtn=\cf4 6\cf0 , coShtPistonBtn=\cf4 5\cf0 , coShtSpeedInc=\cf4 3\cf0 , coShtSpeedDec=\cf4 1\cf0 , togCompBtn=\cf4 10\cf0 , coRevShtBtn=\cf4 4\cf0 , retractStkPis=\cf4 9\cf0 ;\
	\
        \cf2 // Motors\cf0 \
	\cf3 private\cf0  Talon leftMotor, rightMotor, shtMot1, shtMot2, shtMot3;\
	\
	\cf2 // Current Motor Speeds\cf0 \
	\cf3 private\cf0  \cf3 double\cf0  leftSpeed, rightSpeed, shtSpeed;\
	\
	\cf2 // Controllers\cf0 \
	Joystick pilotStick, coPilotStick;\
	\
	\cf2 // Compressor\cf0 \
	Compressor mainComp;\
	\
	\cf2 // Solenoids\cf0 \
	Solenoid driveLowSole, driveHighSole, shtOutSole, shtInSole, shtStkOutSole, shtStkInSole;\
        \
        \cf2 // Drive Direction // true=normal, false=reversed\cf0 \
        \cf3 boolean\cf0  driveDirection=\cf3 true\cf0 ;\
	\
	\cf2 // Sensors\cf0 \
	InsightLT LTDisp = \cf3 new\cf0  InsightLT(InsightLT.TWO_ONE_LINE_ZONES);\
	DecimalData LTrowOne = \cf3 new\cf0  DecimalData(\cf5 "Batt:"\cf0 );\
	IntegerData LTrowTwo = \cf3 new\cf0  IntegerData(\cf5 "Sht Pct:"\cf0 );\
	Gyro mainGyro;\
	Encoder rightEncoder;\
	\
	\cf2 // Auto State\cf0 \
	\cf3 int\cf0  autoState=\cf4 4\cf0 ;\
	\cf3 public\cf0  \cf3 int\cf0  autoPeriodCount=\cf4 0\cf0 ;\
	\cf3 public\cf0  \cf3 boolean\cf0  autoShot=\cf3 false\cf0 ;\
    \
    \cf3 public\cf0  \cf3 void\cf0  robotInit() \{\
        \cf2 // PWM Motor Ports\cf0 \
    	rightMotor = \cf3 new\cf0  Talon(\cf4 2\cf0 );\
    	leftMotor = \cf3 new\cf0  Talon(\cf4 1\cf0 );\
	shtMot1 = \cf3 new\cf0  Talon(\cf4 4\cf0 );\
	shtMot2 = \cf3 new\cf0  Talon(\cf4 5\cf0 );\
	shtMot3 = \cf3 new\cf0  Talon(\cf4 6\cf0 );\
        \
    	\
    	\cf2 // Joysticks\cf0 \
    	pilotStick = \cf3 new\cf0  Joystick(\cf4 1\cf0 );\
    	coPilotStick = \cf3 new\cf0  Joystick(\cf4 2\cf0 );\
		\
	\cf2 // Create Compressor Instance\cf0 \
	mainComp = \cf3 new\cf0  Compressor(\cf4 14\cf0 ,\cf4 1\cf0 );\
	\
	\cf2 // Sensors\cf0 \
	mainGyro = \cf3 new\cf0  Gyro(\cf4 2\cf0 );\
	mainGyro.setSensitivity(\cf4 .007\cf0 );\
	mainGyro.reset();\
	rightEncoder=\cf3 new\cf0  Encoder(\cf4 8\cf0 ,\cf4 9\cf0 );\
	rightEncoder.start();\
	\
	\cf2 // Create Solenoid Instances\cf0 \
	driveLowSole = \cf3 new\cf0  Solenoid(\cf4 1\cf0 ,\cf4 7\cf0 );\
	driveHighSole = \cf3 new\cf0  Solenoid(\cf4 1\cf0 ,\cf4 6\cf0 );\
	shtOutSole = \cf3 new\cf0  Solenoid(\cf4 1\cf0 ,\cf4 5\cf0 );\
	shtInSole = \cf3 new\cf0  Solenoid(\cf4 1\cf0 ,\cf4 4\cf0 );\
	shtStkOutSole = \cf3 new\cf0  Solenoid(\cf4 1\cf0 ,\cf4 3\cf0 );\
	shtStkInSole = \cf3 new\cf0  Solenoid(\cf4 1\cf0 ,\cf4 2\cf0 );\
	LTDisp.startDisplay();\
	LTDisp.registerData(LTrowOne, \cf4 1\cf0 );\
	LTDisp.registerData(LTrowTwo, \cf4 2\cf0 );\
	LTrowTwo.setData(\cf4 3245\cf0 );\
    	\
    	zeroMotorSpeeds();\
    \}\
    \cf3 public\cf0  \cf3 void\cf0  autonomousInit() \{\
    	zeroMotorSpeeds();\
        \cf2 // Start Compressor\cf0 \
	autoPeriodCount=\cf4 0\cf0 ;\
	mainComp.start();\
	mainGyro.reset();\
	rightEncoder.reset();\
    \}\
    \cf3 public\cf0  \cf3 void\cf0  autonomousPeriodic() \{\
	\cf3 if\cf0 (autoState==\cf4 1\cf0 ||autoState==\cf4 2\cf0 ) \{updateShootTurnAuto();\}\
	\cf3 if\cf0 (autoState==\cf4 3\cf0 ) \{updateAutoWaitShoot();\}\
	updateMotors();\
    \}\
    \cf3 public\cf0  \cf3 void\cf0  teleopInit() \{\
    	zeroMotorSpeeds();\
	autoPeriodCount=\cf4 0\cf0 ;\
        \cf2 // Start Compressor\cf0 \
	mainComp.start();\
    \}\
    \cf3 public\cf0  \cf3 void\cf0  teleopPeriodic() \{\
    	updateDrive();\
        updateDriveShifter();\
        updateReverseDrive();\
	updateShooterPiston();\
	updateToggleComp();\
	updateShooter();\
	\cf2 //updateShooterAuto();\cf0 \
	updateShooterSpeed();\
        updateMotors();\
    \}\
    \cf3 public\cf0  \cf3 void\cf0  disabledInit() \{\
    	zeroMotorSpeeds();\
        \
    \}\
    \cf3 public\cf0  \cf3 void\cf0  disabledPeriodic() \{\
        \cf3 if\cf0 (DriverStation.getInstance().getDigitalIn(\cf4 1\cf0 )) \{ autoState=\cf4 1\cf0 ;\} \cf2 // Backup\cf0 \
        \cf3 if\cf0 (DriverStation.getInstance().getDigitalIn(\cf4 2\cf0 )) \{ autoState=\cf4 2\cf0 ;\} \cf2 // No Backup\cf0 \
        \cf3 if\cf0 (DriverStation.getInstance().getDigitalIn(\cf4 3\cf0 )) \{ autoState=\cf4 3\cf0 ;\} \cf2 // Wait Delay\cf0 \
	updateLTDisp();\
    \}\
    \
    \cf3 public\cf0  \cf3 void\cf0  testInit() \{\
	mainGyro.reset(); \cf2 // analog port 2\cf0 \
	rightEncoder.reset(); \cf2 // port 8 and 9\cf0 \
    \}\
    \cf3 public\cf0  \cf3 void\cf0  testPeriodic() \{\
    	updateDrive();\
        updateDriveShifter();\
        updateReverseDrive();\
	updateShooterPiston();\
	updateToggleComp();\
	updateShooter();\
	\cf2 //updateShooterAuto();\cf0 \
	updateShooterSpeed();\
        updateMotors();\
	updateLTDisp();\
	System.out.println(mainGyro.getAngle());\
	\cf2 //System.out.println(rightEncoder.get());\cf0 \
	\cf2 //printController();\cf0 \
    \}\
    \
    \cf2 /////////// CUSTOM FUNCTIONS /////////////\cf0 \
    \
    \cf2 // Zero Motor Speeds\cf0 \
    \cf3 public\cf0  \cf3 void\cf0  zeroMotorSpeeds() \{\
        leftSpeed=\cf4 0\cf0 ;\
        rightSpeed=\cf4 0\cf0 ;\
	shtSpeed=\cf4 0\cf0 ;\
    \}\
   \
    \cf2 // Pneumatics Drive Train Shifting\cf0 \
    \cf3 public\cf0  \cf3 void\cf0  updateDriveShifter() \{\
    	\cf3 if\cf0 (pilotStick.getRawButton(lowGearBtn)) \{\
    		driveLowSole.set(\cf3 true\cf0 );\
    		driveHighSole.set(\cf3 false\cf0 );\
    	\} \cf3 else\cf0  \cf3 if\cf0 (pilotStick.getRawButton(highGearBtn)) \{\
    		driveLowSole.set(\cf3 false\cf0 );\
    		driveHighSole.set(\cf3 true\cf0 );\
    	\} \cf3 else\cf0  \{\
    		driveLowSole.set(\cf3 false\cf0 );\
    		driveHighSole.set(\cf3 false\cf0 );\
    	\}\
    \}\
    \
    \cf2 // Tank Drive\cf0 \
    \cf3 public\cf0  \cf3 void\cf0  updateDrive() \{\
    	\cf3 double\cf0  drivePercent=\cf4 0.55\cf0 ;\
    	\cf3 if\cf0 (pilotStick.getRawButton(fastBtn)) \{drivePercent=\cf4 1.00\cf0 ;\}\
    	\cf3 else\cf0  \cf3 if\cf0 (pilotStick.getRawButton(slowBtn)) \{drivePercent=\cf4 0.3\cf0 ;\}\
        \cf3 if\cf0 (driveDirection) \{ \cf2 // Normal Drive Direction\cf0 \
            leftSpeed=pilotStick.getRawAxis(leftStick)*drivePercent;\
            rightSpeed=pilotStick.getRawAxis(rightStick)*drivePercent;\
        \} \cf3 else\cf0  \{ \cf2 // Reversed Drive Direction\cf0 \
            rightSpeed=-(pilotStick.getRawAxis(leftStick)*drivePercent);\
            leftSpeed=-(pilotStick.getRawAxis(rightStick)*drivePercent);\
        \}\
    \}\
    \
    \cf2 // Reverse Robot Drive Direction\cf0 \
    \cf3 private\cf0  \cf3 boolean\cf0  driveChanged=\cf3 false\cf0 ;\
    \cf3 public\cf0  \cf3 void\cf0  updateReverseDrive() \{\
    	\cf3 if\cf0 (pilotStick.getRawButton(revDrvBtn)&&!driveChanged) \{driveChanged=\cf3 true\cf0 ; driveDirection=!driveDirection;\}\
    	\cf3 if\cf0 (!pilotStick.getRawButton(revDrvBtn))\{driveChanged=\cf3 false\cf0 ;\}\
    \}\
    \cf3 public\cf0  \cf3 int\cf0  shtPisCount=\cf4 0\cf0 ;\
    \cf3 public\cf0  \cf3 int\cf0  shootState=\cf4 0\cf0 ;\
    \cf3 public\cf0  \cf3 boolean\cf0  shotOne=\cf3 false\cf0 ;\
    \cf3 public\cf0  \cf3 void\cf0  updateShooterPiston() \{\
	\cf3 if\cf0 ((coPilotStick.getRawButton(coShtPistonBtn)||pilotStick.getRawButton(shtPistonBtn))&&(coPilotStick.getRawButton(coShtBtn)||pilotStick.getRawButton(shtBtn))) \{\
	    \cf3 if\cf0 (shootState==\cf4 0\cf0 ) \{\
		shootState=\cf4 1\cf0 ;\
	    \}\
	\}\
	\cf3 if\cf0 (shotOne&&shootState==\cf4 1\cf0 ) \{\
	    \cf3 if\cf0 (shtPisCount<\cf4 14\cf0 ) \{\
		shtInSole.set(\cf3 true\cf0 );\
		shtOutSole.set(\cf3 false\cf0 );\
		shtPisCount++;\
	    \} \cf3 else\cf0  \{\
		shtInSole.set(\cf3 false\cf0 );\
		shtOutSole.set(\cf3 false\cf0 );\
		shootState=\cf4 2\cf0 ;\
	    \}\
	\}\
	\cf3 if\cf0 (shotOne&&shootState==\cf4 2\cf0 ) \{\
	    \cf3 if\cf0 (shtPisCount>\cf4 0\cf0 ) \{\
		shtInSole.set(\cf3 false\cf0 );\
		shtOutSole.set(\cf3 true\cf0 );\
		shtPisCount--;\
	    \} \cf3 else\cf0  \{\
		shtInSole.set(\cf3 false\cf0 );\
		shtOutSole.set(\cf3 false\cf0 );\
		shootState=\cf4 0\cf0 ;\
	    \}\
	\}\
	\cf3 if\cf0 (!shotOne&&shootState==\cf4 1\cf0 ) \{\
	    \cf3 if\cf0 (shtPisCount<\cf4 30\cf0 ) \{\
		shtStkInSole.set(\cf3 true\cf0 );\
		shtStkOutSole.set(\cf3 false\cf0 );\
		shtPisCount++;\
		\cf3 if\cf0 (shtPisCount>\cf4 15\cf0 ) \{\
		    shtInSole.set(\cf3 true\cf0 );\
		    shtOutSole.set(\cf3 false\cf0 );\
		\}\
	    \} \cf3 else\cf0  \{\
		shtInSole.set(\cf3 false\cf0 );\
		shtOutSole.set(\cf3 false\cf0 );\
		shtStkInSole.set(\cf3 false\cf0 );\
		shtStkOutSole.set(\cf3 false\cf0 );\
		shootState=\cf4 2\cf0 ;\
	    \}\
	\}\
	\cf3 else\cf0  \cf3 if\cf0 (!shotOne&&shootState==\cf4 2\cf0 ) \{\
	    \cf3 if\cf0 (shtPisCount>\cf4 0\cf0 ) \{\
		shtInSole.set(\cf3 false\cf0 );\
		shtOutSole.set(\cf3 true\cf0 );\
		shtPisCount--;\
	    \} \cf3 else\cf0  \{\
		shtStkInSole.set(\cf3 false\cf0 );\
		shtStkOutSole.set(\cf3 false\cf0 );\
		shtInSole.set(\cf3 false\cf0 );\
		shtOutSole.set(\cf3 false\cf0 );\
		shootState=\cf4 0\cf0 ;\
		shotOne=\cf3 true\cf0 ;\
	    \}\
	\}\
    \}\
    \cf3 public\cf0  \cf3 int\cf0  returnStkPisCnt=\cf4 10\cf0 ;\
    \cf3 public\cf0  \cf3 void\cf0  updateShooter() \{\
	\cf3 if\cf0 (coPilotStick.getRawButton(coShtBtn)||pilotStick.getRawButton(shtBtn)) \{\
	    shtSpeed=shtSetSpeed;\
	    \cf3 if\cf0 (mainComp.enabled()) \{\
		mainComp.stop();\
	    \}\
	\}\
	\cf3 else\cf0  \cf3 if\cf0 (coPilotStick.getRawButton(coRevShtBtn)) \{\
	    shtSpeed=\cf4 -1.0\cf0 ;\
	\}\
	\cf3 else\cf0  \{\
	    shtSpeed=\cf4 0.0\cf0 ;\
	    \cf3 if\cf0 (shotOne&&returnStkPisCnt>\cf4 0\cf0 ) \{\
		shtStkInSole.set(\cf3 false\cf0 );\
		shtStkOutSole.set(\cf3 true\cf0 );\
		returnStkPisCnt--;\
	    \} \cf3 else\cf0  \{\
		shtStkInSole.set(\cf3 false\cf0 );\
		shtStkOutSole.set(\cf3 false\cf0 );\
		returnStkPisCnt=\cf4 10\cf0 ;\
		shotOne=\cf3 false\cf0 ;\
	    \}\
	    \cf3 if\cf0 (!mainComp.enabled()) \{\
		mainComp.start();\
	    \}\
	\}\
    \}\
    \
    \cf3 public\cf0  \cf3 boolean\cf0  shtSpeedUpdated=\cf3 false\cf0 ;\
    \cf3 public\cf0  \cf3 void\cf0  updateShooterSpeed() \{\
	\cf3 if\cf0 (coPilotStick.getRawButton(coShtSpeedInc)) \{\
	    \cf3 if\cf0 (!shtSpeedUpdated) \{\
		shtSetSpeed=shtSetSpeed\cf4 +0.05\cf0 ;\
		System.out.println(\cf5 "Shooter Speed: "\cf0 +shtSetSpeed);\
		shtSpeedUpdated=\cf3 true\cf0 ;\
	    \}\
	\}\
	\cf3 else\cf0  \cf3 if\cf0 (coPilotStick.getRawButton(coShtSpeedDec)) \{\
	    \cf3 if\cf0 (!shtSpeedUpdated) \{\
		shtSetSpeed=shtSetSpeed\cf4 -0.05\cf0 ;\
		System.out.println(\cf5 "Shooter Speed: "\cf0 +shtSetSpeed);\
		shtSpeedUpdated=\cf3 true\cf0 ;\
	    \}\
	\}\
	\cf3 else\cf0  \{ shtSpeedUpdated=\cf3 false\cf0 ; \}\
	\
    \}\
    \cf3 boolean\cf0  togCompSwitched=\cf3 false\cf0 ;\
    \cf3 public\cf0  \cf3 void\cf0  updateToggleComp() \{\
	\cf3 if\cf0 (coPilotStick.getRawButton(togCompBtn)) \{\
	    \cf3 if\cf0 (!togCompSwitched) \{\
		togCompSwitched=\cf3 true\cf0 ;\
		\cf3 if\cf0 (mainComp.enabled()) \{\
		    mainComp.stop();\
		\} \cf3 else\cf0  \{\
		    mainComp.start();\
		\}\
	    \}\
	\} \cf3 else\cf0  \{\
	    togCompSwitched=\cf3 false\cf0 ;\
	\}\
    \}\
    \
    \cf2 // Set Motor Speeds\cf0 \
    \cf3 public\cf0  \cf3 void\cf0  updateMotors() \{\
    	leftMotor.set(-leftSpeed); \cf2 // Motor Reversed\cf0 \
    	rightMotor.set(rightSpeed*\cf4 .95\cf0 );\
	shtMot1.set(-shtSpeed); \cf2 // Motor Reversed\cf0 \
	shtMot2.set(-shtSpeed*\cf4 .75\cf0 ); \cf2 // Motor Reversed\cf0 \
	shtMot3.set(-shtSpeed); \cf2 // Motor Reversed\cf0 \
    \}\
    \cf3 public\cf0  \cf3 void\cf0  updateLTDisp() \{\
	LTrowOne.setData(DriverStation.getInstance().getBatteryVoltage());\
	LTrowTwo.setData((\cf3 int\cf0 )(shtSetSpeed*\cf4 100\cf0 ));\
    \}\
    \
    \
    \
    \
    \cf2 //// Autonomous Routines\cf0 \
    \
    \cf3 public\cf0  \cf3 double\cf0  tarAngDif=\cf4 0\cf0 ;\
    \cf3 public\cf0  \cf3 void\cf0  updateShootTurnAuto() \{\
	\cf3 if\cf0 (autoPeriodCount<\cf4 270\cf0 ) \{\
	    shtSpeed=\cf4 0.71\cf0 ;\
	    \cf3 if\cf0 (autoPeriodCount<\cf4 12\cf0 ) \{\
		\cf3 if\cf0 (mainComp.enabled()) \{\
		    mainComp.stop();\
		\}\
		shtStkOutSole.set(\cf3 false\cf0 );\
		shtStkInSole.set(\cf3 true\cf0 );\
	    \}\
	\} \cf3 else\cf0  \{\
	    shtSpeed=\cf4 0\cf0 ;\
	\}\
	\cf3 if\cf0 ((autoPeriodCount%\cf4 65\cf0 )>\cf4 45\cf0 &&(autoPeriodCount%\cf4 65\cf0 )<\cf4 55\cf0 &&autoPeriodCount<\cf4 270\cf0 ) \{\
	    shtInSole.set(\cf3 true\cf0 );\
	    shtOutSole.set(\cf3 false\cf0 );\
	    \cf3 if\cf0 (!autoShot) \{\
		System.out.println(\cf5 "Shot One Auto Disk at: "\cf0 +shtSpeed);\
		autoShot=\cf3 true\cf0 ;\
	    \}\
	\}\
	\cf3 else\cf0  \cf3 if\cf0 ((autoPeriodCount%\cf4 65\cf0 )>\cf4 55\cf0 &&(autoPeriodCount%\cf4 65\cf0 )<\cf4 65\cf0 &&autoPeriodCount<\cf4 270\cf0 ) \{\
	    shtInSole.set(\cf3 false\cf0 );\
	    shtOutSole.set(\cf3 true\cf0 );\
	    autoShot=\cf3 false\cf0 ;\
	\}\
	\cf3 else\cf0  \{\
	    shtInSole.set(\cf3 false\cf0 );\
	    shtOutSole.set(\cf3 false\cf0 );\
	\}\
	autoPeriodCount++;\
	\cf3 if\cf0 (autoPeriodCount>\cf4 270\cf0 &&autoPeriodCount<\cf4 300\cf0 ) \{\
	    \cf3 if\cf0 (autoPeriodCount<\cf4 285\cf0 ) \{\
		shtStkOutSole.set(\cf3 true\cf0 );\
		shtStkInSole.set(\cf3 false\cf0 );\
	    \} \cf3 else\cf0  \{\
		shtStkOutSole.set(\cf3 false\cf0 );\
		shtStkInSole.set(\cf3 false\cf0 );\
	    \}\
	    leftSpeed=\cf4 0.45\cf0 ;\
	    rightSpeed=\cf4 0.45\cf0 ;\
	    \cf3 if\cf0 (!mainComp.enabled()) \{\
		mainComp.start();\
	    \}\
	\} \cf3 else\cf0  \cf3 if\cf0 (autoState==\cf4 1\cf0 &&autoPeriodCount>\cf4 300\cf0 &&autoPeriodCount<\cf4 350\cf0 &&rightEncoder.get()>\cf4 -12500\cf0 ) \{\
	    \cf2 //// Back Up Auto\cf0 \
	    leftSpeed=\cf4 0.45\cf0 ;\
	    rightSpeed=\cf4 0.45\cf0 ;\
	\} \cf3 else\cf0  \{\
	    leftSpeed=\cf4 0.0\cf0 ;\
	    rightSpeed=\cf4 0.0\cf0 ;\
	\}\
    \}\
    \
    \cf3 public\cf0  \cf3 void\cf0  updateAutoWaitShoot() \{\
	\cf3 if\cf0 (autoPeriodCount>\cf4 390\cf0 &&autoPeriodCount<\cf4 660\cf0 ) \{\
	    shtSpeed=\cf4 0.71\cf0 ;\
	    \cf3 if\cf0 (autoPeriodCount<\cf4 400\cf0 ) \{\
		\cf3 if\cf0 (mainComp.enabled()) \{\
		    mainComp.stop();\
		\}\
		shtStkOutSole.set(\cf3 false\cf0 );\
		shtStkInSole.set(\cf3 true\cf0 );\
	    \}\
	\} \cf3 else\cf0  \{\
	    shtSpeed=\cf4 0\cf0 ;\
	\}\
	\cf3 if\cf0 ((autoPeriodCount%\cf4 65\cf0 )>\cf4 45\cf0 &&(autoPeriodCount%\cf4 65\cf0 )<\cf4 55\cf0 &&autoPeriodCount>\cf4 390\cf0 &&autoPeriodCount<\cf4 660\cf0 ) \{\
	    shtInSole.set(\cf3 true\cf0 );\
	    shtOutSole.set(\cf3 false\cf0 );\
	    \cf3 if\cf0 (!autoShot) \{\
		System.out.println(\cf5 "Shot One Auto Disk at: "\cf0 +shtSpeed);\
		autoShot=\cf3 true\cf0 ;\
	    \}\
	\}\
	\cf3 else\cf0  \cf3 if\cf0 ((autoPeriodCount%\cf4 65\cf0 )>\cf4 55\cf0 &&(autoPeriodCount%\cf4 65\cf0 )<\cf4 65\cf0 &&autoPeriodCount>\cf4 390\cf0 &&autoPeriodCount<\cf4 660\cf0 ) \{\
	    shtInSole.set(\cf3 false\cf0 );\
	    shtOutSole.set(\cf3 true\cf0 );\
	    autoShot=\cf3 false\cf0 ;\
	\}\
	\cf3 else\cf0  \{\
	    shtInSole.set(\cf3 false\cf0 );\
	    shtOutSole.set(\cf3 false\cf0 );\
	\}\
	autoPeriodCount++;\
	\cf3 if\cf0 (autoPeriodCount>\cf4 660\cf0 &&autoPeriodCount<\cf4 790\cf0 ) \{\
	    \cf3 if\cf0 (autoPeriodCount<\cf4 670\cf0 ) \{\
		shtStkOutSole.set(\cf3 true\cf0 );\
		shtStkInSole.set(\cf3 false\cf0 );\
	    \} \cf3 else\cf0  \{\
		shtStkOutSole.set(\cf3 false\cf0 );\
		shtStkInSole.set(\cf3 false\cf0 );\
	    \}\
	    \cf3 if\cf0 (!mainComp.enabled()) \{\
		mainComp.start();\
	    \}\
	\}\
    \}\
    \
    \cf3 public\cf0  \cf3 void\cf0  printController() \{\
	System.out.println(\cf5 "Axis 1: "\cf0 +pilotStick.getRawAxis(\cf4 1\cf0 ));\
	System.out.println(\cf5 "Axis 2: "\cf0 +pilotStick.getRawAxis(\cf4 2\cf0 ));\
	System.out.println(\cf5 "Axis 3: "\cf0 +pilotStick.getRawAxis(\cf4 3\cf0 ));\
	System.out.println(\cf5 "Axis 4: "\cf0 +pilotStick.getRawAxis(\cf4 4\cf0 ));\
	System.out.println(\cf5 "Axis 5: "\cf0 +pilotStick.getRawAxis(\cf4 5\cf0 ));\
	System.out.println(\cf5 "Axis 6: "\cf0 +pilotStick.getRawAxis(\cf4 6\cf0 ));\
    \}\
\}}